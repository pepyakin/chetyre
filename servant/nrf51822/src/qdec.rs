#[doc = r" Register block"]
#[repr(C)]
pub struct RegisterBlock {
    #[doc = "0x00 - Start the quadrature decoder."]
    pub tasks_start: TASKS_START,
    #[doc = "0x04 - Stop the quadrature decoder."]
    pub tasks_stop: TASKS_STOP,
    #[doc = "0x08 - Transfers the content from ACC registers to ACCREAD registers, and clears the ACC registers."]
    pub tasks_readclracc: TASKS_READCLRACC,
    _reserved0: [u8; 244usize],
    #[doc = "0x100 - A new sample is written to the sample register."]
    pub events_samplerdy: EVENTS_SAMPLERDY,
    #[doc = "0x104 - REPORTPER number of samples accumulated in ACC register, and ACC register different than zero."]
    pub events_reportrdy: EVENTS_REPORTRDY,
    #[doc = "0x108 - ACC or ACCDBL register overflow."]
    pub events_accof: EVENTS_ACCOF,
    _reserved1: [u8; 244usize],
    #[doc = "0x200 - Shortcut for the QDEC."]
    pub shorts: SHORTS,
    _reserved2: [u8; 256usize],
    #[doc = "0x304 - Interrupt enable set register."]
    pub intenset: INTENSET,
    #[doc = "0x308 - Interrupt enable clear register."]
    pub intenclr: INTENCLR,
    _reserved3: [u8; 500usize],
    #[doc = "0x500 - Enable the QDEC."]
    pub enable: ENABLE,
    #[doc = "0x504 - LED output pin polarity."]
    pub ledpol: LEDPOL,
    #[doc = "0x508 - Sample period."]
    pub sampleper: SAMPLEPER,
    #[doc = "0x50c - Motion sample value."]
    pub sample: SAMPLE,
    #[doc = "0x510 - Number of samples to generate an EVENT_REPORTRDY."]
    pub reportper: REPORTPER,
    #[doc = "0x514 - Accumulated valid transitions register."]
    pub acc: ACC,
    #[doc = "0x518 - Snapshot of ACC register. Value generated by the TASKS_READCLEACC task."]
    pub accread: ACCREAD,
    #[doc = "0x51c - Pin select for LED output."]
    pub pselled: PSELLED,
    #[doc = "0x520 - Pin select for phase A input."]
    pub psela: PSELA,
    #[doc = "0x524 - Pin select for phase B input."]
    pub pselb: PSELB,
    #[doc = "0x528 - Enable debouncer input filters."]
    pub dbfen: DBFEN,
    _reserved4: [u8; 20usize],
    #[doc = "0x540 - Time LED is switched ON before the sample."]
    pub ledpre: LEDPRE,
    #[doc = "0x544 - Accumulated double (error) transitions register."]
    pub accdbl: ACCDBL,
    #[doc = "0x548 - Snapshot of ACCDBL register. Value generated by the TASKS_READCLEACC task."]
    pub accdblread: ACCDBLREAD,
}
#[doc = "Start the quadrature decoder."]
pub struct TASKS_START {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Start the quadrature decoder."]
pub mod tasks_start;
#[doc = "Stop the quadrature decoder."]
pub struct TASKS_STOP {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Stop the quadrature decoder."]
pub mod tasks_stop;
#[doc = "Transfers the content from ACC registers to ACCREAD registers, and clears the ACC registers."]
pub struct TASKS_READCLRACC {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Transfers the content from ACC registers to ACCREAD registers, and clears the ACC registers."]
pub mod tasks_readclracc;
#[doc = "A new sample is written to the sample register."]
pub struct EVENTS_SAMPLERDY {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "A new sample is written to the sample register."]
pub mod events_samplerdy;
#[doc = "REPORTPER number of samples accumulated in ACC register, and ACC register different than zero."]
pub struct EVENTS_REPORTRDY {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "REPORTPER number of samples accumulated in ACC register, and ACC register different than zero."]
pub mod events_reportrdy;
#[doc = "ACC or ACCDBL register overflow."]
pub struct EVENTS_ACCOF {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "ACC or ACCDBL register overflow."]
pub mod events_accof;
#[doc = "Shortcut for the QDEC."]
pub struct SHORTS {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Shortcut for the QDEC."]
pub mod shorts;
#[doc = "Interrupt enable set register."]
pub struct INTENSET {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Interrupt enable set register."]
pub mod intenset;
#[doc = "Interrupt enable clear register."]
pub struct INTENCLR {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Interrupt enable clear register."]
pub mod intenclr;
#[doc = "Enable the QDEC."]
pub struct ENABLE {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Enable the QDEC."]
pub mod enable;
#[doc = "LED output pin polarity."]
pub struct LEDPOL {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "LED output pin polarity."]
pub mod ledpol;
#[doc = "Sample period."]
pub struct SAMPLEPER {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Sample period."]
pub mod sampleper;
#[doc = "Motion sample value."]
pub struct SAMPLE {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Motion sample value."]
pub mod sample;
#[doc = "Number of samples to generate an EVENT_REPORTRDY."]
pub struct REPORTPER {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Number of samples to generate an EVENT_REPORTRDY."]
pub mod reportper;
#[doc = "Accumulated valid transitions register."]
pub struct ACC {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Accumulated valid transitions register."]
pub mod acc;
#[doc = "Snapshot of ACC register. Value generated by the TASKS_READCLEACC task."]
pub struct ACCREAD {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Snapshot of ACC register. Value generated by the TASKS_READCLEACC task."]
pub mod accread;
#[doc = "Pin select for LED output."]
pub struct PSELLED {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Pin select for LED output."]
pub mod pselled;
#[doc = "Pin select for phase A input."]
pub struct PSELA {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Pin select for phase A input."]
pub mod psela;
#[doc = "Pin select for phase B input."]
pub struct PSELB {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Pin select for phase B input."]
pub mod pselb;
#[doc = "Enable debouncer input filters."]
pub struct DBFEN {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Enable debouncer input filters."]
pub mod dbfen;
#[doc = "Time LED is switched ON before the sample."]
pub struct LEDPRE {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Time LED is switched ON before the sample."]
pub mod ledpre;
#[doc = "Accumulated double (error) transitions register."]
pub struct ACCDBL {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Accumulated double (error) transitions register."]
pub mod accdbl;
#[doc = "Snapshot of ACCDBL register. Value generated by the TASKS_READCLEACC task."]
pub struct ACCDBLREAD {
    register: ::vcell::VolatileCell<u32>,
}
#[doc = "Snapshot of ACCDBL register. Value generated by the TASKS_READCLEACC task."]
pub mod accdblread;
